package apps.proman.api.model;

import java.util.Objects;
import apps.proman.api.model.TaskOwnerDetailsType;
import apps.proman.api.model.TaskProjectSummaryType;
import apps.proman.api.model.TaskStatusType;
import apps.proman.api.model.TaskWatchersType;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.UUID;
import org.springframework.validation.annotation.Validated;
import javax.validation.Valid;
import javax.validation.constraints.*;

/**
 * ProjectTaskDetailsResponse
 */
@Validated
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-01-28T14:38:46.506+05:30")

public class ProjectTaskDetailsResponse   {
  @JsonProperty("id")
  private UUID id = null;

  @JsonProperty("project")
  private TaskProjectSummaryType project = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("owner")
  private TaskOwnerDetailsType owner = null;

  @JsonProperty("status")
  private TaskStatusType status = null;

  @JsonProperty("start_date")
  private String startDate = null;

  @JsonProperty("end_date")
  private String endDate = null;

  @JsonProperty("original_effort")
  private Integer originalEffort = null;

  @JsonProperty("logged_effort")
  private Integer loggedEffort = null;

  @JsonProperty("remaining_effort")
  private Integer remainingEffort = null;

  @JsonProperty("watchers")
  private TaskWatchersType watchers = null;

  public ProjectTaskDetailsResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the board task in a standard UUID format generated by API backend
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique identifier of the board task in a standard UUID format generated by API backend")
  @NotNull

  @Valid

  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public ProjectTaskDetailsResponse project(TaskProjectSummaryType project) {
    this.project = project;
    return this;
  }

  /**
   * Project that this task belongs to
   * @return project
  **/
  @ApiModelProperty(value = "Project that this task belongs to")

  @Valid

  public TaskProjectSummaryType getProject() {
    return project;
  }

  public void setProject(TaskProjectSummaryType project) {
    this.project = project;
  }

  public ProjectTaskDetailsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the task
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the task")
  @NotNull


  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProjectTaskDetailsResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the task
   * @return description
  **/
  @ApiModelProperty(required = true, value = "Description of the task")
  @NotNull


  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProjectTaskDetailsResponse owner(TaskOwnerDetailsType owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Owner (user) of this task
   * @return owner
  **/
  @ApiModelProperty(required = true, value = "Owner (user) of this task")
  @NotNull

  @Valid

  public TaskOwnerDetailsType getOwner() {
    return owner;
  }

  public void setOwner(TaskOwnerDetailsType owner) {
    this.owner = owner;
  }

  public ProjectTaskDetailsResponse status(TaskStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "")
  @NotNull

  @Valid

  public TaskStatusType getStatus() {
    return status;
  }

  public void setStatus(TaskStatusType status) {
    this.status = status;
  }

  public ProjectTaskDetailsResponse startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date of the board
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "Start date of the board")
  @NotNull


  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public ProjectTaskDetailsResponse endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date of the board
   * @return endDate
  **/
  @ApiModelProperty(value = "End date of the board")


  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public ProjectTaskDetailsResponse originalEffort(Integer originalEffort) {
    this.originalEffort = originalEffort;
    return this;
  }

  /**
   * Estimated effort (in seconds) for this task
   * @return originalEffort
  **/
  @ApiModelProperty(required = true, value = "Estimated effort (in seconds) for this task")
  @NotNull


  public Integer getOriginalEffort() {
    return originalEffort;
  }

  public void setOriginalEffort(Integer originalEffort) {
    this.originalEffort = originalEffort;
  }

  public ProjectTaskDetailsResponse loggedEffort(Integer loggedEffort) {
    this.loggedEffort = loggedEffort;
    return this;
  }

  /**
   * Logged effort (in seconds) for this task
   * @return loggedEffort
  **/
  @ApiModelProperty(required = true, value = "Logged effort (in seconds) for this task")
  @NotNull


  public Integer getLoggedEffort() {
    return loggedEffort;
  }

  public void setLoggedEffort(Integer loggedEffort) {
    this.loggedEffort = loggedEffort;
  }

  public ProjectTaskDetailsResponse remainingEffort(Integer remainingEffort) {
    this.remainingEffort = remainingEffort;
    return this;
  }

  /**
   * Remaining effort (in seconds) for this task
   * @return remainingEffort
  **/
  @ApiModelProperty(required = true, value = "Remaining effort (in seconds) for this task")
  @NotNull


  public Integer getRemainingEffort() {
    return remainingEffort;
  }

  public void setRemainingEffort(Integer remainingEffort) {
    this.remainingEffort = remainingEffort;
  }

  public ProjectTaskDetailsResponse watchers(TaskWatchersType watchers) {
    this.watchers = watchers;
    return this;
  }

  /**
   * List of watchers of this task
   * @return watchers
  **/
  @ApiModelProperty(required = true, value = "List of watchers of this task")
  @NotNull

  @Valid

  public TaskWatchersType getWatchers() {
    return watchers;
  }

  public void setWatchers(TaskWatchersType watchers) {
    this.watchers = watchers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectTaskDetailsResponse projectTaskDetailsResponse = (ProjectTaskDetailsResponse) o;
    return Objects.equals(this.id, projectTaskDetailsResponse.id) &&
        Objects.equals(this.project, projectTaskDetailsResponse.project) &&
        Objects.equals(this.name, projectTaskDetailsResponse.name) &&
        Objects.equals(this.description, projectTaskDetailsResponse.description) &&
        Objects.equals(this.owner, projectTaskDetailsResponse.owner) &&
        Objects.equals(this.status, projectTaskDetailsResponse.status) &&
        Objects.equals(this.startDate, projectTaskDetailsResponse.startDate) &&
        Objects.equals(this.endDate, projectTaskDetailsResponse.endDate) &&
        Objects.equals(this.originalEffort, projectTaskDetailsResponse.originalEffort) &&
        Objects.equals(this.loggedEffort, projectTaskDetailsResponse.loggedEffort) &&
        Objects.equals(this.remainingEffort, projectTaskDetailsResponse.remainingEffort) &&
        Objects.equals(this.watchers, projectTaskDetailsResponse.watchers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, project, name, description, owner, status, startDate, endDate, originalEffort, loggedEffort, remainingEffort, watchers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectTaskDetailsResponse {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    originalEffort: ").append(toIndentedString(originalEffort)).append("\n");
    sb.append("    loggedEffort: ").append(toIndentedString(loggedEffort)).append("\n");
    sb.append("    remainingEffort: ").append(toIndentedString(remainingEffort)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

